#include "vtkPolyDataMapper.h"
#include "vtkActor.h"
#include "vtkRenderWindow.h"
#include "vtkRenderer.h"
#include "vtkPolyData.h"
#include "vtkSmartPointer.h"
#include "vtkSphereSource.h"
#include "vtkWindowToImageFilter.h"
#include "vtkPNGWriter.h"
#include "vtkGraphicsFactory.h"
#include "vtkImagingFactory.h"

int main ()
{

    // Graphics Factory
  vtkGraphicsFactory * graphics_factory
      = vtkGraphicsFactory::New();
  graphics_factory->SetOffScreenOnlyMode( 1);
  graphics_factory->SetUseMesaClasses( 1 );

  // Imaging Factory
  vtkImagingFactory * imaging_factory
      = vtkImagingFactory::New();
  imaging_factory->SetUseMesaClasses( 1 ); 

  
  //sphere 1
  vtkSmartPointer<vtkSphereSource> Sphere1 = vtkSmartPointer<vtkSphereSource>::New();
    
  vtkSmartPointer<vtkPolyDataMapper> Mapper1 = vtkSmartPointer<vtkPolyDataMapper>::New();
  Mapper1->SetInput(Sphere1->GetOutput());

  
  vtkSmartPointer<vtkActor> Actor1 = vtkSmartPointer<vtkActor>::New();
  Actor1->SetMapper(Mapper1);
  
  // a renderer and render window
  vtkSmartPointer<vtkRenderer> Renderer = vtkSmartPointer<vtkRenderer>::New();
  vtkSmartPointer<vtkRenderWindow> RenderWindow = vtkSmartPointer<vtkRenderWindow>::New();
  RenderWindow->SetOffScreenRendering( 1 ); 
  RenderWindow->AddRenderer(Renderer);

  // add the actors to the scene
  Renderer->AddActor(Actor1);
  Renderer->SetBackground(1,1,1); // Background color white

  RenderWindow->Render();

  vtkSmartPointer<vtkWindowToImageFilter> WindowToImageFilter = vtkSmartPointer<
      vtkWindowToImageFilter>::New();
  WindowToImageFilter->SetInput(RenderWindow);
  WindowToImageFilter->Update();
  
  vtkSmartPointer<vtkPNGWriter> Writer = vtkSmartPointer<vtkPNGWriter>::New();
  Writer->SetFileName("screenshot.png");
  Writer->SetInput(WindowToImageFilter->GetOutput());
  Writer->Write();

  return 0;
}
